// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using pigeon_crud_service.Models;

#nullable disable

namespace pigeon_crud_service.Migrations
{
    [DbContext(typeof(PigeonCrudDBContext))]
    [Migration("20241229110713_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("crud")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("pigeon_crud_service.Models.DBModels.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FirmId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("FirmId");

                    b.ToTable("Contact", "crud");
                });

            modelBuilder.Entity("pigeon_crud_service.Models.DBModels.ContactInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<int>("ContactType")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("ContactInformation", "crud");
                });

            modelBuilder.Entity("pigeon_crud_service.Models.DBModels.Firm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Firm", "crud");
                });

            modelBuilder.Entity("pigeon_crud_service.Models.DBModels.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(160)");

                    b.Property<int>("LocationType")
                        .HasColumnType("integer");

                    b.Property<string>("NVIAddress")
                        .HasColumnType("varchar(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Location", "crud");
                });

            modelBuilder.Entity("pigeon_crud_service.Models.DBModels.Contact", b =>
                {
                    b.HasOne("pigeon_crud_service.Models.DBModels.Firm", "Firm")
                        .WithMany("Contacts")
                        .HasForeignKey("FirmId");

                    b.Navigation("Firm");
                });

            modelBuilder.Entity("pigeon_crud_service.Models.DBModels.ContactInformation", b =>
                {
                    b.HasOne("pigeon_crud_service.Models.DBModels.Contact", "Contact")
                        .WithMany("ContactInformations")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("pigeon_crud_service.Models.DBModels.Firm", b =>
                {
                    b.HasOne("pigeon_crud_service.Models.DBModels.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("pigeon_crud_service.Models.DBModels.Contact", b =>
                {
                    b.Navigation("ContactInformations");
                });

            modelBuilder.Entity("pigeon_crud_service.Models.DBModels.Firm", b =>
                {
                    b.Navigation("Contacts");
                });
#pragma warning restore 612, 618
        }
    }
}
